{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"exp",
				"expected_return"
			],
			[
				"post",
				"post_id"
			],
			[
				"pos",
				"position"
			],
			[
				"l",
				"like"
			],
			[
				"border",
				"border"
			],
			[
				"never",
				"neverever_get_confession_box"
			],
			[
				"backg",
				"background"
			],
			[
				"user",
				"user_liked_items"
			],
			[
				"array_ke",
				"array_key_exists"
			],
			[
				"liked",
				"liked_items"
			],
			[
				"lik",
				"likes_count"
			],
			[
				"update_post",
				"update_post_meta"
			],
			[
				"Confession",
				"ConfessionsList-item"
			],
			[
				"confession",
				"confessionTitle"
			],
			[
				"su",
				"submitConfessionStepsStep"
			],
			[
				"tempn",
				"tempname"
			],
			[
				"list-style",
				"list-style-type"
			],
			[
				"re",
				"response"
			],
			[
				"wpmen",
				"wp_nav_menu"
			],
			[
				"no",
				"nowrap"
			],
			[
				"p",
				"pre-line"
			],
			[
				"clas",
				"classes"
			],
			[
				"json_",
				"json_encode"
			],
			[
				"rewind",
				"rewind_posts"
			],
			[
				"first-",
				"first-of-type  (pseudo-class)"
			],
			[
				"strto",
				"strtotime"
			],
			[
				"a",
				"none  (value)"
			],
			[
				"n",
				"nth-child(  (pseudo-class)"
			],
			[
				"backgro",
				"background-image"
			],
			[
				"inl",
				"inline-block"
			],
			[
				"plug",
				"plugin_info"
			],
			[
				"back",
				"background-color"
			],
			[
				"first",
				":first-child"
			],
			[
				"enable",
				"enable_extended_return_values"
			],
			[
				"custom",
				"custom_field_key"
			],
			[
				"font-",
				"font-family"
			],
			[
				"one_l",
				"one_plugin_slug"
			],
			[
				"border-c",
				"border-color"
			],
			[
				"di",
				"display"
			],
			[
				"list-sty",
				"list-style-type"
			],
			[
				"de",
				"description"
			],
			[
				"html",
				"htmlspecialchars"
			],
			[
				"obje",
				"object_name"
			],
			[
				"op",
				"option_page"
			],
			[
				"in",
				"inline-block"
			],
			[
				"bac",
				"background"
			],
			[
				"new",
				"new_lis"
			],
			[
				"strt",
				"strtolower"
			],
			[
				"con",
				"connector_slug"
			],
			[
				"co",
				"connector"
			],
			[
				"mr",
				"merged_fields"
			],
			[
				"array_in",
				"array_intersect_key"
			],
			[
				"key",
				"keys_possibly_wrong_but_new_order  (variable)"
			],
			[
				"exi",
				"existing_fields_copy"
			],
			[
				"func",
				"function_exists"
			],
			[
				"fun",
				"function_exists"
			],
			[
				"field",
				"fieldgroup"
			],
			[
				"tes",
				"testclass"
			],
			[
				"border-r",
				"border-right"
			],
			[
				"mysql",
				"mysql_connect"
			],
			[
				"get_de",
				"get_defined_constants"
			],
			[
				"fred",
				"freddys_marker"
			],
			[
				"fre",
				"freddys_map"
			],
			[
				"pro",
				"products"
			],
			[
				"str_rep",
				"str_replace"
			],
			[
				"registp",
				"register_post_type"
			],
			[
				"prin",
				"print_r"
			],
			[
				"wp",
				"wptexturize"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 61 files for \"sf_d(\"\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/class_simple_fields_field.php:\n  153  		$filename = $classinfo->getFileName();\n  154  		$this->field_url = plugins_url(basename(dirname($filename))) . \"/\";\n  155: 		sf_d( plugins_url($filename, basename(dirname($filename))) );\n  156: 		sf_d( $filename );\n  157: 		sf_d($classinfo);\n  158: 		sf_d($classinfo->getParentClass());\n  159  		return $this->field_url;\n  160  		\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/functions.php:\n   13   */\n   14  if (!function_exists(\"sf_d\")) {\n   15: function sf_d($var, $heading = \"\") {\n   16  	\n   17  	$out = \"\";\n   ..\n  654  \n  655  				if ( ! $old_field_was_found_among_new_fields) {\n  656: 					// echo \"<br>not found, considered deleted:\"; sf_d($one_field);\n  657  					// unset( $field_group_defaults[\"fields\"][ $one_field_key ] );\n  658  					$field_group_defaults[\"fields\"][ $one_field_key ][\"deleted\"] = true;\n  ...\n  831  					// do that first since those values are the oldest (pre-upgrade pre-save values)\n  832  /*\n  833: sf_d( isset( $existing_field_array_from_slug[ \"type_\". $existing_field_array_from_slug[\"type\"] . \"_options\" ] ) );\n  834: sf_d( $existing_field_array_from_slug[ \"type_\". $existing_field_array_from_slug[\"type\"] . \"_options\" ] );\n  835  This array will alsways exist after we've added a field\n  836  Array\n  ...\n  845  */\n  846  #echo \"<br>before:<br>\";\n  847: #sf_d($arr_merged_options);\n  848  					if ( isset( $existing_field_array_from_slug[ \"type_\". $existing_field_array_from_slug[\"type\"] . \"_options\" ] ) ) {\n  849  # denna ökar antalet dropdown values vid varje körning\n  850: 						#sf_d( $existing_field_array_from_slug[ \"type_\". $existing_field_array_from_slug[\"type\"] . \"_options\" ] );\n  851  						$arr_old_vals_to_merge = array();\n  852  						$arr_old_vals_to_merge_values = array();\n  ...\n  867  \n  868  						#$arr_merged_options = array_merge( $existing_field_array_from_slug[ \"type_\". $existing_field_array_from_slug[\"type\"] . \"_options\" ], $arr_merged_options );\n  869: #sf_d($arr_old_vals_to_merge);\n  870  						$arr_merged_options = array_merge( $arr_old_vals_to_merge, $arr_merged_options );\n  871  					}\n  872: #sf_d($arr_merged_options);\n  873  #echo \"<br>after:<br>\";\n  874: #sf_d($arr_merged_options);\n  875  \n  876  					// Merge in new values, overwriting existing, but also letting existing keys that have no new value be\n  ...\n  973  \n  974  							$arr_merged_options = array_merge($arr_merged_options, $new_values);\n  975: #echo 111; sf_d($arr_merged_options);\n  976  \n  977  						} // if\n  ...\n 1044  					*/\n 1045  #echo \"<br>arr_merged_options:\";\n 1046: #sf_d($arr_merged_options);\n 1047  					if ( isset( $one_new_field[\"type\"] ) &&  $sf->field_type_is_core( $one_new_field[\"type\"] ) ) {\n 1048  \n ....\n 1071  \n 1072  						$existing_field_array_from_slug[ \"type_\" . $one_new_field[\"type\"] . \"_options\"] = $arr_type_old_school_options;\n 1073: #echo \"<br>arr_type_old_school_options:\";sf_d( $arr_type_old_school_options );\n 1074  					}\n 1075  					// end move options in place\n ....\n 1141   */\n 1142  function simple_fields_register_post_connector($unique_name = \"\", $new_post_connector = array()) {\n 1143: 	#sf_d($new_post_connector);\n 1144  	global $sf;\n 1145  \n ....\n 1427  	$default_connector_to_use = $sf->get_default_connector_for_post_type($post->post_type);\n 1428  \n 1429: 	/*echo \"saved_connector:\"; sf_d($saved_connector);\n 1430: 	echo \"default_connector_to_use:\"; sf_d($default_connector_to_use);\n 1431  	exit;*/\n 1432  \n ....\n 1448  	// Loop through the field groups that this post connector has and locate the field_slug we are looking for\n 1449  	$post_connector_info = simple_fields_get_all_fields_and_values_for_post($post_id);\n 1450: 	// echo \"post_connector_info: \"; sf_d($post_connector_info); exit;\n 1451  	foreach ($post_connector_info[\"field_groups\"] as $one_field_group) {\n 1452  \n ....\n 1670  				// that's it, we have the options that should be available for this field slug\n 1671  				// echo \"<br>field: \" . $one_field_group_field[\"slug\"];\n 1672: 				// sf_d($parsed_options_for_this_field);\n 1673  					\n 1674  				// Slug is found. Get and return values.\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/inc-admin-options-debug.php:\n  144  				echo \"<h3>Post Connectors</h3>\\n\";\n  145  				echo \"<p>Called with function <code>get_post_connectors()</code>\";\n  146: 				sf_d( $this->sf->get_post_connectors() );\n  147  \n  148  				echo \"<hr>\";\n  ...\n  150  				echo \"<h3>Field Groups</h3>\\n\";\n  151  				echo \"<p>Called with function <code>get_field_groups()</code>\";\n  152: 				sf_d( $this->sf->get_field_groups() );\n  153  				\n  154  				echo \"<hr>\";\n  155  				echo \"<h3>simple_fields_post_type_defaults</h3>\";\n  156  				echo '<p>Called with: get_option(\"simple_fields_post_type_defaults\")';\n  157: 				sf_d( $this->sf->get_post_type_defaults() );\n  158  				\n  159  			}\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/inc-admin-options-export-import.php:\n   68  			append-new\n   69  			*/\n   70: 			#sf_d( $arr_import, '$arr_import');\n   71  			\n   72  			if ( \"replace\" === $import_type) {\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/inc-admin-options-manage.php:\n  156  					 <span class=\"description\"><?php echo __(\"A unique identifier for this connector\", 'simple-fields') ?></span>\n  157  					 <?php\n  158: 					 // sf_d($post_connector_in_edit);\n  159  					 ?>\n  160  				</td>\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/readme.txt:\n  152  \n  153  - If a file field type had a file selected, but that file was removed, then an array with values would get returned. Now fixed so it returns an empty array instead, just the way it works if no file at all is selected. Fixes https://github.com/bonny/WordPress-Simple-Fields/issues/94.\n  154: - Modified sf_d() so it will output the length of a string, and it will also tell you if a string is empty\n  155  \n  156  #### Version 1.4.3\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/simple_fields.php:\n  228  										// $matches[1] = field type\n  229  										// $matches[2] = field type num\n  230: 										#sf_d($field_vals_key, '$field_vals_key');\n  231: 										#sf_d($field_vals_val, '$field_vals_val');\n  232  \n  233  										$values[ $values_index ] = $field_vals_val;\n  ...\n  259  							} // if type_\n  260  \n  261: 							// sf_d($field);\n  262  \n  263  						} // foreach field key\n  ...\n  316  							\n  317  							$string_name = \"Field radiobuttons value, \" . $field[\"slug\"] . \" \" . \"radiobutton_num_\" . $one_radio_option_val[\"num\"];\n  318: 							// sf_d($this->wpml_context);sf_d($string_name);sf_d($one_radio_option_val[\"value\"]);\n  319  							icl_register_string($this->wpml_context, $string_name, $one_radio_option_val[\"value\"]);\n  320  \n  ...\n  328  							\n  329  							$string_name = \"Field dropdown value, \" . $field[\"slug\"] . \" \" . \"dropdown_num_\" . $one_dropdown_val[\"num\"];\n  330: 							// sf_d($string_name);\n  331  							icl_register_string($this->wpml_context, $string_name, $one_dropdown_val[\"value\"]);\n  332  \n  ...\n  792  \n  793  			// Loop through each fieldgroups\n  794: #sf_d($fieldgroups, '$fieldgroups');\n  795  			foreach ($fieldgroups as $one_field_group_id => $one_field_group_fields) {\n  796  				\n  797  				// Loop through each field in each field group\n  798  #simple_fields::debug(\"one_field_group_fields\", $one_field_group_fields);\n  799: #sf_d($one_field_group_fields);\n  800  \n  801  				// Get info about the field group that are saved\n  ...\n  837  	$one_field_slug = \"added\";\n  838  } else {\n  839: 	#sf_d($arr_fieldgroup_info[\"fields\"], 'fields');\n  840  	foreach ($arr_fieldgroup_info[\"fields\"] as $one_field_in_fieldgroup) {\n  841  		if ( intval( $one_field_in_fieldgroup[\"id\"] ) === intval( $one_field_id ) ) {\n  ...\n  845  	}\n  846  	$one_field_slug = $arr_field_info[\"slug\"];\n  847: 	#sf_d($one_field_slug, 'one_field_slug');\n  848: 	#sf_d($one_field_id, 'one_field_id');\n  849  	#exit;\n  850  }\n  ...\n  854  						$custom_field_value = $one_field_value;\n  855  \n  856: /*sf_d($custom_field_key, '$custom_field_key');\n  857: sf_d($one_field_group_id, '$one_field_group_id');\n  858: sf_d($one_field_id, '$one_field_id');\n  859: sf_d($num_in_set, 'num_in_set');\n  860: sf_d($arr_fieldgroup_info[\"slug\"], 'arr_fieldgroup_info[\"slug\"]');\n  861: sf_d($one_field_slug, 'one_field_slug');*/\n  862  \n  863  \n  ...\n  884  							)\n  885  							*/\n  886: 							//echo \"xxx save value for custom field type\"; sf_d($custom_field_value);\n  887  \n  888  						} else {\n  ...\n  894  						}\n  895  						\n  896: 						// echo \"<br>Saving value for post with id $post_id. Custom_field_key is $custom_field_key, custom_field_value is:\";sf_d($custom_field_value);\n  897  						update_post_meta($post_id, $custom_field_key, $custom_field_value);\n  898  						$num_in_set++;\n  ...\n  983  				$custom_field_key = $this->get_meta_key($field_group_id, $field_id, $num_in_set, $current_field_group[\"slug\"], $field[\"slug\"]);\n  984  \n  985: 				/*sf_d($field_group_id, '$field_group_id');\n  986: 				sf_d($field_id, '$field_id');\n  987: 				sf_d($num_in_set, '$num_in_set');\n  988: 				sf_d($current_field_group[\"slug\"], '$current_field_group[\"slug\"]');\n  989: 				sf_d($field[\"slug\"], '$field[\"slug\"]');\n  990: 				sf_d($custom_field_key, '$custom_field_key');*/\n  991  				\n  992  				$saved_value = get_post_meta($post_id, $custom_field_key, true);\n  ...\n 1266  \n 1267  							echo \"<div class='simple-fields-metabox-field-textarea-tinymce-wrapper'>\";\n 1268: 							#sf_d($saved_value, \"saved_value\");\n 1269  							#$field_unique_id = \"GORILLA\" . rand();\n 1270: 							#sf_d($args, \"args\");\n 1271: 							#sf_d($use_defaults, \"use_defaults\");\n 1272  							/*\n 1273  							$editor_id\n ....\n 1300  								)							\n 1301  							*/\n 1302: 							// sf_d($field_unique_id, \"adding wp_editor with field_unique_id\");\n 1303  							wp_editor( $saved_value, $field_unique_id, $args );\n 1304  \n ....\n 1634  							// Return as array if field type has not specified other\n 1635  							$custom_field_type_saved_value = $saved_value;\n 1636: 							#echo \"saved value\"; sf_d($custom_field_type_saved_value);\n 1637  							// always return array, or just sometimes?\n 1638  							// if a field has saved a value as a single value it will be returned as the value at position [0]\n ....\n 1813  \n 1814  			// Generate headline for the table view\n 1815: 			#sf_d($current_field_group);\n 1816  			if (\"table\" === $default_gui_view) {\n 1817  				echo \"<div class='sf-cf simple-fields-metabox-field-group-view-table-headline-wrap'>\";\n 1818  				foreach ( $current_field_group[\"fields\"] as $field_id => $field_arr ) {\n 1819: 					// sf_d($field_arr);\n 1820  					printf('<div class=\"simple-fields-metabox-field-group-view-table-headline simple-fields-metabox-field-group-view-table-headline-count-%1$d\">', $current_field_group[\"fields_count\"]);\n 1821  					printf('<div class=\"simple-fields-field-group-view-table-headline-name\">%1$s</div>', $this->get_string( \"Field name, \" . $field_arr[\"slug\"], $field_arr[\"name\"] ) );\n ....\n 2129  	 * $my_field_group_id = 10;\n 2130  	 * $field_group_info = $sf->get_field_group( $my_field_group_id );\n 2131: 	 * sf_d( $field_group_info , '$field_group_info' );\n 2132  	 * </code>\n 2133  	 *\n ....\n 3503  							$content .= \"<br>Use <code><b>simple_fields_values('\".$one_field[\"slug\"].\"')</b></code>.\";\n 3504  							/*ob_start();\n 3505: 							sf_d( simple_fields_values($one_field[\"slug\"]) );\n 3506  							$content .= ob_get_clean();*/\n 3507  						} else {		\n 3508  							$content .= \"<br>Use <code><b>simple_fields_value('\".$one_field[\"slug\"].\"')</b></code>.\";\n 3509  							/*ob_start();\n 3510: 							sf_d( simple_fields_value($one_field[\"slug\"]) );\n 3511  							$content .= ob_get_clean();*/\n 3512  						}\n ....\n 3527  						$content = \"<li>Get all fields at once: use <code><b>simple_fields_values('\".$str_all_group_fields.\"')</b></code>.\";\n 3528  						/*ob_start();\n 3529: 						sf_d( simple_fields_values($str_all_group_fields) );\n 3530  						$content .= ob_get_clean();*/\n 3531  					} else {\n 3532  						$content = \"<li>Get all fields at once: use <code><b>simple_fields_value('\".$str_all_group_fields.\"')</b></code>.\";\n 3533  						/*ob_start();\n 3534: 						sf_d( simple_fields_value($str_all_group_fields) );\n 3535  						$content .= ob_get_clean();*/\n 3536  					}\n ....\n 3833  \n 3834  			// format = default in jquery = mm/dd/yy (year 4 digits)\n 3835: 			// sf_d($field_value); // 14/10/2012\n 3836  			$return_field_value[\"saved_value\"] = $field_value;\n 3837  			if (isset($field_value)) {\n ....\n 3964  		// Remove last with num in set\n 3965  		$custom_field_key = rtrim($custom_field_key, \"0\");\n 3966: 		#sf_d($custom_field_key);\n 3967  \n 3968  		return $custom_field_key;\n ....\n 4485  		}\n 4486  		\n 4487: 		// sf_d($arr, \"arr\"); // 0 timeline 1 timeline_date\n 4488  		$field = $this->get_field_by_slug( $arr[1], $arr[0] );\n 4489  \n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/field_types/field_date_v2.php:\n  262  				}\n  263  				$str_unixtime_to_set = strtotime($str_saved_unixtime);\n  264: 				//sf_d( date(\"Y-m-d H:i\", $str_unixtime_to_set) );\n  265: 				//sf_d( $str_iso_to_set );\n  266  				$str_unixtime_to_set = $str_unixtime_to_set * 1000;\n  267  			}\n  ...\n  270  			$str_date_format = \"ISO_8601\";\n  271  			if (isset($options[\"date_format\"])) $str_date_format = $options[\"date_format\"];\n  272: 			// echo \"date_format:\";sf_d($str_date_format);\n  273  \n  274  			// First day. 0 = sunday, 1 = monday\n  ...\n  383  			\n  384  			/*\n  385: 				// echo \"Saving these values for field:\";sf_d($values);\n  386  				Array\n  387  				(\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/field_types/field_divider.php:\n   80  				$this->get_class_name($options[\"appearance\"])\n   81  			);\n   82: 			#sf_d($options);\n   83  			return $output;\n   84  			//return sprintf('<input type=\"text\" name=\"%1$s\" value=\"%2$s\">', $this->get_options_name(\"name\"), empty($saved_values[\"name\"]) ? esc_attr($options[\"textDefaultName\"]) : esc_attr($saved_values[\"name\"]));		\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/tests/test-basic.php:\n   29  		$this->assertTrue( self::$sf->ns_key > $old_ns );\n   30  \n   31: 		// sf_d( self::$sf->ns_key );\n   32  \n   33  		// check that cache stores and gets things correctly\n   ..\n   74  \n   75  		$this->expectOutputString($expected);\n   76: 		sf_d(\"this is simple fields debug function\");\n   77  	}\n   78  \n   ..\n   88  EOD;\n   89  		$this->expectOutputString($expected);\n   90: 		sf_d(\"this is simple fields debug function\", \"With headline\");\n   91  	}\n   92  \n   ..\n  139  \n  140  \n  141: 		#sf_d( $this->factory->post->create_many( 5 ) );exit;\n  142  		#$post_id = 11;\n  143  \n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/tests/SimpleFieldsTests/SimpleFieldsTest.php:\n   33  \n   34  		$this->expectOutputString($expected);\n   35: 		sf_d(\"this is simple fields debug function\");\n   36  	}\n   37  \n   ..\n   47  EOD;\n   48  		$this->expectOutputString($expected);\n   49: 		sf_d(\"this is simple fields debug function\", \"With headline\");\n   50  	}\n   51  \n   ..\n 1399  		// Now that the main query has run, we can do tests that are more functional in nature\n 1400  		#global $wp_query;\n 1401: 		#sf_d($wp_query);\n 1402  		#$post = $wp_query->get_queried_object();\n 1403  		#var_dump($post);\n\n80 matches across 11 files\n\n\nSearching 61 files for \"ionsf_d(\"\n\n0 matches across 0 files\n\n\nSearching 61 files for \"ion sf_d(\"\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/functions.php:\n   13   */\n   14  if (!function_exists(\"sf_d\")) {\n   15: function sf_d($var, $heading = \"\") {\n   16  	\n   17  	$out = \"\";\n\n1 match in 1 file\n\n\nSearching 61 files for \"get_field_group_by_slug\"\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/functions.php:\n 1128  \n 1129  	// Re-get the field so it's the same as when getting a field group manually\n 1130: 	$field_group_by_slug = $sf->get_field_group_by_slug($slug, true);\n 1131  \n 1132  	return $field_group_by_slug;\n ....\n 1270  			// First check by id, then if not found by slug - slug is prefered and the only options kinda supported...by me at least :)\n 1271  			$found_field_group = NULL;\n 1272: 			$found_field_group = isset( $field_group_options[\"id\"] ) ? $sf->get_field_group_by_slug($field_group_options[\"id\"]) : NULL;\n 1273: 			$found_field_group = ! isset( $found_field_group ) && isset( $field_group_options[\"slug\"] ) ? $sf->get_field_group_by_slug($field_group_options[\"slug\"]) : NULL;\n 1274  \n 1275  			// Field group was found, so now add it to the connector\n ....\n 1829  	if (FALSE === $values) {\n 1830  	\n 1831: 		$field_group = $sf->get_field_group_by_slug($field_group_id_or_slug);\n 1832  \n 1833  		$arr_fields = array();\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/readme.txt:\n  273    simple_fields_save_options<br>\n  274    simple_fields_get_extended_return_values_for_field<br>\n  275:   simple_fields_get_field_group_by_slug<br>\n  276    simple_fields_clear_caches<br>\n  277    simple_fields_get_meta_key_template<br>\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/simple_fields.php:\n 3862  	 * @return mixed array with field group info if field groups exists, false if does not exist\n 3863  	 */\n 3864: 	function get_field_group_by_slug($field_group_slug, $include_deleted = false) {\n 3865  \n 3866: 		$cache_key = 'simple_fields_'.$this->ns_key.'_get_field_group_by_slug_deleted_' . (int) $include_deleted . \"_\" . $field_group_slug;\n 3867  		$return_val = wp_cache_get( $cache_key, 'simple_fields' );\n 3868  \n ....\n 3881  \n 3882  						wp_cache_set( $cache_key, $one_field_group, 'simple_fields' );\n 3883: 						$one_field_group = apply_filters( \"simple_fields_get_field_group_by_slug\", $one_field_group, $field_group_slug);\n 3884  						return $one_field_group;\n 3885  					}\n ....\n 3889  				\n 3890  				$return_val = FALSE;\n 3891: 				$return_val = apply_filters( \"simple_fields_get_field_group_by_slug\", $return_val, $field_group_slug);\n 3892  				return $return_val;\n 3893  	\n ....\n 3901  						// deleted and we don't want deleted ones\n 3902  						wp_cache_set( $cache_key, FALSE, 'simple_fields' );					\n 3903: 						$return_val = apply_filters( \"simple_fields_get_field_group_by_slug\", $return_val, $field_group_slug);\n 3904  						return $return_val;\n 3905  \n ....\n 3908  					wp_cache_set( $cache_key, $field_groups[$field_group_slug], 'simple_fields' );\n 3909  					$return_val = $field_groups[$field_group_slug];\n 3910: 					$return_val = apply_filters( \"simple_fields_get_field_group_by_slug\", $return_val, $field_group_slug);\n 3911  					return $return_val;\n 3912  \n ....\n 3914  \n 3915  					wp_cache_set( $cache_key, FALSE, 'simple_fields' );					\n 3916: 					$return_val = apply_filters( \"simple_fields_get_field_group_by_slug\", $return_val, $field_group_slug);\n 3917  					return $return_val;\n 3918  \n ....\n 3923  		} // if not in cache\n 3924  \n 3925: 		$return_val = apply_filters( \"simple_fields_get_field_group_by_slug\", $return_val, $field_group_slug);\n 3926  		return $return_val;\n 3927  \n ....\n 4022  	function get_field_by_slug($field_slug = \"\", $fieldgroup_slug = \"\") {\n 4023  \n 4024: 		$field_group = $this->get_field_group_by_slug($fieldgroup_slug);\n 4025  		if (!$field_group) return FALSE;\n 4026  		\n\n14 matches across 3 files\n\n\nSearching 63 files for \"TODO: how do i get the filter dropdown\"\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/scripts.js:\n   61  \n   62  		// Code based on https://github.com/thomasgriffin/New-Media-Image-Uploader/blob/master/js/media.js\n   63: 		// TODO: how do i get the filter dropdown?? i think i've tried everything!\n   64          my.media_frame = wp.media({\n   65              className: 'media-frame simple-fields-media-frame',\n\n1 match in 1 file\n\n\nSearching 63 files for \"simple-fields-media-frame\"\n\n/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/scripts.js:\n   65  		/*\n   66          my.media_frame = wp.media({\n   67:             className: 'media-frame simple-fields-media-frame',\n   68              frame: 'select', // select | post. select removed left nav (insert media, create gallery, set featured image)\n   69              multiple: false,\n   ..\n   80  		my.media_frame = wp.media({\n   81  			state: 'mystate',\n   82: 			className: 'media-frame simple-fields-media-frame',\n   83  			frame: 'select', // select | post. select removed left nav (insert media, create gallery, set featured image)\n   84  			multiple: false,\n\n2 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 20394,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "scripts.js",
			"settings":
			{
				"buffer_size": 31485,
				"line_ending": "Unix"
			}
		},
		{
			"file": "styles-edit-post.css",
			"settings":
			{
				"buffer_size": 15601,
				"line_ending": "Unix"
			}
		},
		{
			"file": "readme.txt",
			"settings":
			{
				"buffer_size": 34160,
				"line_ending": "Unix"
			}
		},
		{
			"file": "functions.php",
			"settings":
			{
				"buffer_size": 68152,
				"line_ending": "Unix"
			}
		},
		{
			"file": "class_simple_fields_field.php",
			"settings":
			{
				"buffer_size": 5047,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 313.0,
		"selected_items":
		[
			[
				"format",
				"Format: Javascript"
			],
			[
				"du",
				"File: Duplicate"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"php",
				"PHP Code Sniffer: Sniff this file"
			],
			[
				"phpu",
				"PHPUnit: Run with params"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"istall",
				"Package Control: Install Package"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"dupl",
				"File: Duplicate"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"ren",
				"File: Rename"
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"cop",
				"File: Copy Name"
			],
			[
				"err",
				"SublimeLinter: Show Error List"
			],
			[
				"foramt",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"json",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"prett",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"rett",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"pr",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"er",
				"SublimeLinter: Show Error List"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"toggle op",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"side",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"lint",
				"SublimeLinter: Show Error List"
			],
			[
				"emmet",
				"Emmet: Next Edit Point"
			],
			[
				"hold",
				"Hhhhold: Insert Image"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"dupli",
				"File: Duplicate"
			],
			[
				"finder",
				"File: Open In Browser - Production Server"
			],
			[
				"error",
				"SublimeLinter: Show Error List"
			],
			[
				"tabs",
				"Indentation: Convert to Tabs"
			],
			[
				"ter",
				"Open in terminal"
			],
			[
				"form",
				"Format: Javascript"
			],
			[
				"term",
				"Open in terminal"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"gitpu",
				"Git: Pull"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"wordwra",
				"Word Wrap: Toggle"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"disabl",
				"SublimeLinter: Disable Linting"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"zen",
				"Zen Coding: Delete tag"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 579.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/functions.php",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/tests/SimpleFieldsTests/SimpleFieldsTest.php",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/simple_fields.php",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/styles-edit-post.css",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/readme.txt",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/field_types/field_date_v2.php",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/datepicker/jquery-ui-base/jquery.ui.theme.css",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/js/jquery-ui-timepicker-addon.css",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/js/jquery-ui-datepicker.css",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/datepicker/jquery-ui-base/jquery-ui.css",
		"/Users/bonny/Desktop/jquery-ui-1.10.3.custom/development-bundle/themes/ui-lightness/jquery.ui.datepicker.css",
		"/Users/bonny/Desktop/jquery-ui-1.10.3.custom/development-bundle/themes/base/jquery.ui.theme.css",
		"/Users/bonny/Desktop/jquery-ui-1.10.3.custom/development-bundle/themes/base/jquery.ui.datepicker.css",
		"/Users/bonny/Desktop/jquery-ui-1.10.3.custom/css/ui-lightness/jquery-ui-1.10.3.custom.css",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/tests/test-basic.php",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/.travis.yml",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/tests/bootstrap.php",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/run-tests.command",
		"/Users/bonny/Library/Caches/Cleanup At Startup/Transmit/A02D7E89-4533-416D-B80A-13F788224E5D/beta.texttv.nu",
		"/Users/bonny/Library/Caches/Cleanup At Startup/Transmit/D6CCD616-039B-4500-9A45-39E4D5D6E85A/brottsplatskartan.se",
		"/Users/bonny/Library/Caches/Cleanup At Startup/Transmit/2DC9D88C-87FA-44E4-9761-A36FF6052719/texttv.nu",
		"/Users/bonny/Library/Caches/Cleanup At Startup/Transmit/E9BA7408-38F1-4D29-BBE2-006F5F0D14F6/d4c05e8440f4388242fce953ab5e94e1",
		"/Users/bonny/Dropbox/Plugins/GIT/cms-tree-page-view/readme.txt",
		"/Users/bonny/Dropbox/Plugins/GIT/cms-tree-page-view/index.php",
		"/Users/bonny/Dropbox/Plugins/GIT/Simple-Fields/functions (BonnyAir2013's conflicted copy 2013-09-26).php",
		"/Users/bonny/Documents/Sites/playground-root/playground-root.sublime-workspace",
		"/Users/bonny/Dropbox/Apps/Transmit/Favorites/Favorites.sqlite",
		"/Users/bonny/Documents/Sites/Localhost/index.php",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/example_company_2_en.xml",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/company_company_description.xsl",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/functions-npm.php",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/inc.templates.xsl",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/companies_overview.xsl",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/inc.translations.xml",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/assets/css/ngm.css",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/inc.variables.xsl",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/CompanyDataSchema_1.0.xsd",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/XML/example_company_1_en.xml",
		"/Users/bonny/Documents/Sites/ngm/wp-content/themes/ngm/style.css",
		"/Users/bonny/Documents/Sites/ngm/ngm.sublime-project",
		"/Users/bonny/Documents/Sites/ngm/ngm.sublime-workspace",
		"/Users/bonny/Documents/Localhost/EarthPeople/ngm.sublime-project",
		"/Users/bonny/Documents/Localhost/EarthPeople/ngm/xmlrpc.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/ngm/wp-load.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/ngm/wp-config.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/ngm/wp-content/themes/ngm/functions.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-admin/includes/file.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-admin/includes/media.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/style-animations.css",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/ep/ep.js",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-includes/class-wp-admin-bar.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/ep/ep-functions.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/parts/shared/html-header.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/ep/ep-simple-front-end-edit-buttons.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/front-page.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/.htaccess",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/handlebars.js/src/parser-suffix.js",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-config.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/404.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/single.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/template-submit.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/style.css",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/style-submit.css",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/ep/scripts.js",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/functions.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/parts/shared/header.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/template-top.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/template-latest.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/modernizr.js",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/languages/sv_SE.po",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/modernizr/grunt.js",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/languages/admin-sv_SE.po",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-includes/query.php",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/index.php",
		"/Users/bonny/Desktop/ngm/CompanyDataSchema_1.0.xsd",
		"/Users/bonny/Documents/Localhost/EarthPeople/neverever/app/wp/wp-content/plugins/simple-fields/functions.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-config.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/ep/ep-functions.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/plugins/simple-fields/functions.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/index.php",
		"/tmp/phprun-output.tmp",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/.htaccess",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/style.css",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/ep/ep-simple-front-end-edit-buttons.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/tempo/classes/db/117682-tempofestival.sql",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/style-header.css",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/ep/scripts.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/single.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/parts/shared/html-header.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/parts/shared/header.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/parts/shared/footer.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/single-bekannelse.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/template-submit.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/functions.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/jquery-cycle2/jquery.cycle2.core.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/jquery-cycle2/cycle2.jquery.json",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/theme-compat/header.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/functions.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/page.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/parts/shared/html-footer.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-admin/includes/file.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/ep/fb.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/ngm/wp-content/themes/ngm/functions.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/comment.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-admin/includes/media.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-admin/custom-background.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/post.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-admin/custom-header.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/index.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/fb-channel.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/handlebars.js/dist/handlebars.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/handlebars.js/dist/handlebars.runtime.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/template-submit.html",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/class-simplepie.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/link-template.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/class-wp-editor.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-admin/includes/ajax-actions.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-admin/admin-ajax.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/bower.json",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/js/wplink.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/js/wplink.min.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/404.php",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/.bowerrc",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/bower.json",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/jquery/bower.json",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-content/themes/neverever/js/jquery-extra-selectors.js",
		"/Users/bonny/Dropbox/Localhost/EarthPeople/neverever/app/wp/wp-includes/theme-compat/footer.php",
		"/Users/bonny/Dropbox/Webb/bonnys-wordpress-stuff/ep-theme/404.php"
	],
	"find":
	{
		"height": 86.0
	},
	"find_in_files":
	{
		"height": 95.0,
		"where_history":
		[
			"*",
			"-*.js",
			"",
			".*php",
			"",
			"/Users/bonny/Dropbox/Localhost/wptrunk",
			"/Users/bonny/Dropbox/Webb/WordPress-GIT",
			"",
			"<open folders>",
			"",
			"<?php"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"changel",
			"simple-fields-media-frame",
			"’",
			"‘",
			"TODO: how do i get the filter dropdown",
			"exte",
			"get_field_group_by_slug",
			"ion sf_d(",
			"ionsf_d(",
			"sf_d(",
			"\n.ui-",
			".ui-state-default,",
			".ui-state-default",
			"triangl",
			".ui-",
			".ui-widget ",
			"dialog",
			"modal",
			"back",
			"calen",
			"datepick",
			"calend",
			"ajax.",
			"enque",
			"enq",
			"example",
			"http:",
			"http://example.org/?p=3",
			"4",
			"3",
			"2",
			"(",
			"wbdb",
			"wp_postmeta",
			"\"",
			"(",
			"post_id",
			"$this->sf->",
			"insertDataForManualAddedFields",
			"title",
			"11",
			"39",
			"\"11",
			"\\\"11",
			"id",
			"11",
			"false",
			"''",
			"=> '",
			"attachment_id",
			"self::",
			"self",
			"post_id_for_manual_tests",
			"$post_id_for_manual_tests",
			"(11",
			"(",
			"create",
			"create_many",
			"createmany",
			"_insert_manually_added_fields",
			"upstream_cache_status",
			"php-regular",
			"/",
			"japan",
			"trans",
			"comp",
			"coma",
			"omsattning",
			"avskrivningar",
			"före avskrivningar",
			"Rörelseresultat före avskrivningar",
			"mode=\"",
			"table_income_statemant",
			"507",
			"2012",
			"omsättning",
			"resultat",
			"earningsAfterNetFinancialItems",
			"xml",
			"2009",
			"\n",
			"270",
			"KeyIndicatorsForPeriod",
			"apply-te",
			",",
			"TabCompanyMatureness",
			"--",
			"<string",
			"<xsl:param name=\"",
			"strCEO",
			"Headline",
			"Advisors",
			"Subsidiaries",
			"Owners",
			"Matureness",
			"KeyIndicators",
			"TabCompanyDescription",
			"back",
			"HeadlineCompaniesOnNPM",
			"str",
			"swfobject",
			".photoBrowser",
			"photoBrowser-close",
			"font-fam",
			"font",
			"-close",
			"close",
			"ja, jag har läst",
			"submit-confession-confirmation-message",
			"u med och tävlar elle",
			"n get_term_by",
			"get_term_by",
			"require",
			"functions",
			"require(",
			"include",
			"overr",
			"media_handle_sideload",
			"post_id",
			"wp_handle_sideload",
			"sideload",
			"is_image",
			"is_iamge",
			"elms.body",
			"elms.bo",
			"document.body",
			"elms.body",
			"wook"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			".ui-datepicker ",
			"example.com",
			"http://example.com/wordpress/",
			"<?php ",
			"<?php echo ",
			".simple-history-no-more-items ",
			"$one_new_field",
			"		foreach($new_field_group[\"fields\"] as $oneField) {\n			\n			// Set up default values for this field\n			$fields[$field_id] = array();\n			$field_slug = \"field_$field_id\";\n			$field_defaults = array(\n					\"name\"        => \"\",\n					\"slug\"        => $field_slug,\n					\"description\" => \"\",\n					\"type\"        => \"\",\n					\"type_post_options\" => array(\n						\"enabled_post_types\" => array(), \n						\"additional_arguments\" => \"\"\n					),\n					\"type_taxonomyterm_options\" => array(\n						\"additional_arguments\" => \"\"\n					),\n					\"id\"      => \"\",\n					\"deleted\" => 0\n			);\n			\n			// If a field with this index/id exists then merge that fields values with our default values\n			// @todo: should check slug here, it does some wierd index thingie instead\n			// so if you add one field in php, then one in the gui, and then extend the php with one more field = \n			// field from gui is overwritten since it get's the id that the php version want\n			// use only slug instead and we should be fine\n#$field_groups[$field_group_id]\n#echo \"oneField:\";\n#sf_d($oneField);\n#sf_d($field_groups[$field_group_id]['fields']);\n#sf_d($new_field_group[\"fields\"]);\n/*\nArray\n(\n    [type] => file\n    [slug] => image_id\n    [name] => Image\n    [description] => Choose image for this slide\n)\n*/\n\n// Find id of possibly existing field using the slug\n$field_id_for_slug = NULL;\nforeach ($field_groups[$field_group_id][\"fields\"] as $one_field) {\n	#$one_fi\n	if ($one_field[\"slug\"] == $) {\n\n	}\n	sf_d($one_field);\n}\n			if (isset($field_groups[$field_group_id]['fields'][$field_id])) {\n				$field_defaults = simple_fields_merge_arrays($field_defaults, $field_groups[$field_group_id]['fields'][$field_id]);\n			}\n			\n			// Do wierd stuff with field default values\n			foreach($field_defaults as $oneDefaultFieldKey => $oneDefaultFieldValue) {\n				\n				if ($oneDefaultFieldKey == \"id\") {\n					$fields[$field_id][\"id\"] = $field_id;\n				} else {\n					if (!isset($oneField[$oneDefaultFieldKey])) {\n						$fields[$field_id][$oneDefaultFieldKey] = $oneDefaultFieldValue;\n					}\n					\n				}\n				\n				// If the default key is an array\n				if (isset($oneField[$oneDefaultFieldKey]) && is_array($oneField[$oneDefaultFieldKey]) && !empty($oneField[$oneDefaultFieldKey])) {\n\n					// If this is an array with options for a field type\n					// For example \"type_post_options\" or \"type_taxonomyterm_options\"\n					$options_type = preg_replace(\"/type_([a-z]+)_options/i\", '$1', $oneDefaultFieldKey);\n					if (!empty($options_type)) {\n					\n						foreach(array_keys($oneField[$oneDefaultFieldKey]) as $optionKey) {\n\n							if (is_numeric($optionKey)) {\n								$newOptionKey = $options_type . \"_num_\" . $optionKey;\n								$fields[$field_id][$oneDefaultFieldKey][$newOptionKey] = $oneField[$oneDefaultFieldKey][$optionKey];\n								unset($fields[$field_id][$oneDefaultFieldKey][$optionKey]);\n								$optionKey = $newOptionKey;\n							}\n							if (isset($fields[$field_id][$oneDefaultFieldKey][$optionKey]) && is_array($fields[$field_id][$oneDefaultFieldKey][$optionKey]) && !empty($fields[$field_id][$oneDefaultFieldKey][$optionKey][\"value\"])) {\n								if (!isset($fields[$field_id][$oneDefaultFieldKey][$optionKey][\"deleted\"])) {\n									$fields[$field_id][$oneDefaultFieldKey][$optionKey][\"deleted\"] = 0;\n								}\n							}\n							\n						} // foreach\n						\n					}\n				}\n				\n				if (!isset($fields[$field_id][$oneDefaultFieldKey])) {\n					$fields[$field_id][$oneDefaultFieldKey] = $oneDefaultFieldValue;\n				}\n			}\n			\n			$field_id++;\n		"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20394,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										244,
										249
									],
									[
										315,
										320
									],
									[
										343,
										348
									],
									[
										370,
										375
									],
									[
										579,
										584
									],
									[
										766,
										771
									],
									[
										1056,
										1061
									],
									[
										1178,
										1183
									],
									[
										1416,
										1421
									],
									[
										1646,
										1651
									],
									[
										2045,
										2050
									],
									[
										2192,
										2197
									],
									[
										2258,
										2263
									],
									[
										2523,
										2528
									],
									[
										2648,
										2653
									],
									[
										2977,
										2982
									],
									[
										3202,
										3207
									],
									[
										3402,
										3407
									],
									[
										3468,
										3473
									],
									[
										3778,
										3783
									],
									[
										4074,
										4079
									],
									[
										4389,
										4394
									],
									[
										4598,
										4603
									],
									[
										4827,
										4832
									],
									[
										5026,
										5031
									],
									[
										5352,
										5357
									],
									[
										5793,
										5798
									],
									[
										6102,
										6107
									],
									[
										6162,
										6167
									],
									[
										6332,
										6337
									],
									[
										6562,
										6567
									],
									[
										6588,
										6593
									],
									[
										6607,
										6612
									],
									[
										6916,
										6921
									],
									[
										7107,
										7112
									],
									[
										7387,
										7392
									],
									[
										7552,
										7557
									],
									[
										7842,
										7847
									],
									[
										7892,
										7897
									],
									[
										8029,
										8034
									],
									[
										8082,
										8087
									],
									[
										8139,
										8144
									],
									[
										8184,
										8189
									],
									[
										8224,
										8229
									],
									[
										8298,
										8303
									],
									[
										8457,
										8462
									],
									[
										8678,
										8683
									],
									[
										8980,
										8985
									],
									[
										9033,
										9038
									],
									[
										9074,
										9079
									],
									[
										9119,
										9124
									],
									[
										9198,
										9203
									],
									[
										9249,
										9254
									],
									[
										9503,
										9508
									],
									[
										9607,
										9612
									],
									[
										9643,
										9648
									],
									[
										9786,
										9791
									],
									[
										10098,
										10103
									],
									[
										10381,
										10386
									],
									[
										10652,
										10657
									],
									[
										11169,
										11174
									],
									[
										11401,
										11406
									],
									[
										11665,
										11670
									],
									[
										11949,
										11954
									],
									[
										12235,
										12240
									],
									[
										12438,
										12443
									],
									[
										12686,
										12691
									],
									[
										12793,
										12798
									],
									[
										13085,
										13090
									],
									[
										13147,
										13152
									],
									[
										13417,
										13422
									],
									[
										13578,
										13583
									],
									[
										13783,
										13788
									],
									[
										14189,
										14194
									],
									[
										14356,
										14361
									],
									[
										14494,
										14499
									],
									[
										14607,
										14612
									],
									[
										14851,
										14856
									],
									[
										14989,
										14994
									],
									[
										15210,
										15215
									],
									[
										15557,
										15566
									],
									[
										15878,
										15901
									],
									[
										16212,
										16235
									],
									[
										16381,
										16404
									],
									[
										16595,
										16618
									],
									[
										16872,
										16895
									],
									[
										17186,
										17209
									],
									[
										17320,
										17343
									],
									[
										17634,
										17657
									],
									[
										17855,
										17878
									],
									[
										18142,
										18165
									],
									[
										18455,
										18478
									],
									[
										18693,
										18716
									],
									[
										18889,
										18912
									],
									[
										19108,
										19131
									],
									[
										19484,
										19522
									],
									[
										19900,
										19925
									],
									[
										20198,
										20223
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								20164,
								20170
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"function_name_status_row": 492,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 8687.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "scripts.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31485,
						"regions":
						{
						},
						"selection":
						[
							[
								2160,
								2160
							]
						],
						"settings":
						{
							"function_name_status_row": 81,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 992.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "styles-edit-post.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15601,
						"regions":
						{
							"gutter_color_10142":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/eeeeee.png",
								"regions":
								[
									[
										10142,
										10181
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_11724":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/cccccc.png",
								"regions":
								[
									[
										11724,
										11755
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_11956":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/cccccc.png",
								"regions":
								[
									[
										11956,
										11987
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_12356":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/666666.png",
								"regions":
								[
									[
										12356,
										12370
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1455":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/fcfcfc.png",
								"regions":
								[
									[
										1455,
										1546
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1547":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/fcfcfc.png",
								"regions":
								[
									[
										1547,
										1616
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1617":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/fcfcfc.png",
								"regions":
								[
									[
										1617,
										1686
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1687":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/fcfcfc.png",
								"regions":
								[
									[
										1687,
										1756
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1757":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/fcfcfc.png",
								"regions":
								[
									[
										1757,
										1826
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1827":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/eeeeee.png",
								"regions":
								[
									[
										1827,
										1855
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_2014":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/fffcf1.png",
								"regions":
								[
									[
										2014,
										2041
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_2462":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/dfdfdf.png",
								"regions":
								[
									[
										2462,
										2489
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_5431":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/DFDFDF.png",
								"regions":
								[
									[
										5431,
										5463
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_6370":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/eeeeee.png",
								"regions":
								[
									[
										6370,
										6395
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_6396":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/dddddd.png",
								"regions":
								[
									[
										6396,
										6421
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_7147":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/666666.png",
								"regions":
								[
									[
										7147,
										7161
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_7210":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/cccccc.png",
								"regions":
								[
									[
										7210,
										7240
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_9227":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/DFDFDF.png",
								"regions":
								[
									[
										9227,
										9255
									]
								],
								"scope": "gutter_color"
							}
						},
						"selection":
						[
							[
								15601,
								15601
							]
						],
						"settings":
						{
							"function_name_status_row": 579,
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9090.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "readme.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34160,
						"regions":
						{
						},
						"selection":
						[
							[
								7120,
								7120
							]
						],
						"settings":
						{
							"function_name_status_row": 149,
							"syntax": "Packages/MarkdownEditing/Markdown.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3675.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "functions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 68152,
						"regions":
						{
						},
						"selection":
						[
							[
								56053,
								56053
							]
						],
						"settings":
						{
							"function_name_status_row": 1518,
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 25622.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "class_simple_fields_field.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5047,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 156.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"project": "simple-fields.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"read",
				"readme.txt"
			],
			[
				"ui-theme",
				"datepicker/jquery-ui-base/jquery.ui.theme.css"
			],
			[
				"func",
				"functions.php"
			],
			[
				"tests/",
				"tests/test-basic.php"
			],
			[
				"functions",
				"functions.php"
			],
			[
				"transxml",
				"wp-content/themes/ngm/XML/inc.translations.xml"
			],
			[
				"ncss",
				"wp-content/themes/ngm/assets/css/ngm.css"
			],
			[
				"example_company_1_en",
				"wp-content/themes/ngm/XML/example_company_1_en.xml"
			],
			[
				"ngm.css",
				"wp-content/themes/ngm/assets/css/ngm.css"
			],
			[
				"stylecss",
				"wp-content/themes/ngm/style.css"
			],
			[
				"wpconf",
				"wp-config.php"
			],
			[
				"neverstylecss",
				"app/wp/wp-content/themes/neverever/style-submit.css"
			],
			[
				"submit",
				"app/wp/wp-content/themes/neverever/template-submit.php"
			],
			[
				"anim",
				"app/wp/wp-content/themes/neverever/style-animations.css"
			],
			[
				"funct",
				"app/wp/wp-content/themes/neverever/functions.php"
			],
			[
				"scripts.js",
				"app/wp/wp-content/themes/neverever/js/ep/scripts.js"
			],
			[
				"ep.js",
				"app/wp/wp-content/themes/neverever/ep/ep.js"
			],
			[
				"front-p",
				"app/wp/wp-content/themes/neverever/front-page.php"
			],
			[
				"bek",
				"app/wp/wp-content/themes/neverever/single-bekannelse.php"
			],
			[
				"function",
				"app/wp/wp-content/themes/neverever/functions.php"
			],
			[
				"templatetop",
				"app/wp/wp-content/themes/neverever/template-top.php"
			],
			[
				"partshea",
				"app/wp/wp-content/themes/neverever/parts/shared/html-header.php"
			],
			[
				"neverfunction",
				"app/wp/wp-content/themes/neverever/functions.php"
			],
			[
				"style.css",
				"app/wp/wp-content/themes/neverever/style.css"
			],
			[
				"wp-confi",
				"app/wp/wp-config.php"
			],
			[
				"scripts",
				"app/wp/wp-content/themes/neverever/js/ep/scripts.js"
			],
			[
				"query.php",
				"app/wp/wp-includes/query.php"
			],
			[
				"404",
				"app/wp/wp-content/themes/neverever/404.php"
			],
			[
				"wp-conf",
				"app/wp/wp-config.php"
			],
			[
				"single",
				"app/wp/wp-content/themes/neverever/single-bekannelse.php"
			],
			[
				"funtions",
				"app/wp/wp-content/themes/neverever/functions.php"
			],
			[
				"front-e",
				"app/wp/wp-content/themes/neverever/ep/ep-simple-front-end-edit-buttons.php"
			],
			[
				"partfooter",
				"app/wp/wp-content/themes/neverever/parts/shared/footer.php"
			],
			[
				"parthed",
				"app/wp/wp-content/themes/neverever/parts/shared/header.php"
			],
			[
				"partheader",
				"app/wp/wp-content/themes/neverever/parts/shared/html-header.php"
			],
			[
				"cyclejs",
				"app/wp/wp-content/themes/neverever/js/jquery-cycle2/jquery.cycle2.core.js"
			],
			[
				"cycle",
				"app/wp/wp-content/themes/neverever/js/jquery-cycle2/cycle2.jquery.json"
			],
			[
				"themfunc",
				"app/wp/wp-content/themes/neverever/functions.php"
			],
			[
				"front",
				"app/wp/wp-content/themes/neverever/ep/ep-simple-front-end-edit-buttons.php"
			],
			[
				"epfunct",
				"app/wp/wp-content/themes/neverever/ep/ep-functions.php"
			],
			[
				"header",
				"app/wp/wp-includes/theme-compat/header.php"
			],
			[
				"",
				"app/wp/wp-content/themes/neverever/functions.php"
			],
			[
				"themefunctions",
				"app/wp/wp-content/themes/neverever/functions.php"
			],
			[
				"partsheae",
				"app/wp/wp-content/themes/neverever/parts/shared/header.php"
			],
			[
				"page.php",
				"app/wp/wp-content/themes/neverever/page.php"
			],
			[
				"html-foo",
				"app/wp/wp-content/themes/neverever/parts/shared/html-footer.php"
			],
			[
				"parts",
				"app/wp/wp-content/themes/neverever/parts/shared/header.php"
			],
			[
				"htmlheader",
				"app/wp/wp-content/themes/neverever/parts/shared/html-header.php"
			],
			[
				"config",
				"app/wp/wp-config.php"
			],
			[
				"wconfig",
				"app/wp/wp-config.php"
			],
			[
				"everstyle.css",
				"app/wp/wp-content/themes/neverever/style.css"
			],
			[
				"partsfooter",
				"app/wp/wp-content/themes/neverever/parts/shared/html-footer.php"
			],
			[
				"neverindex",
				"app/wp/wp-content/themes/neverever/index.php"
			],
			[
				"partsheader",
				"app/wp/wp-content/themes/neverever/parts/shared/header.php"
			],
			[
				"extrasel",
				"app/wp/wp-content/themes/neverever/js/jquery-extra-selectors.js"
			],
			[
				"htmlfooter",
				"app/wp/wp-content/themes/neverever/parts/shared/html-footer.php"
			],
			[
				"nevereverfoo",
				"app/wp/wp-content/themes/neverever/parts/shared/footer.php"
			],
			[
				"footer",
				"app/wp/wp-includes/theme-compat/footer.php"
			],
			[
				"neverstyle",
				"app/wp/wp-content/themes/neverever/style.css"
			],
			[
				"select",
				"ep-theme/js/selectivizr.js"
			],
			[
				"sharedfooter",
				"ep-theme/parts/shared/html-footer.php"
			],
			[
				"ep-f",
				"ep-theme/ep/ep-functions.php"
			],
			[
				"index",
				"ep-theme/index.php"
			],
			[
				"style",
				"ep-theme/style.css"
			],
			[
				"ep-",
				"ep-theme/ep/ep-simple-front-end-edit-buttons.php"
			],
			[
				"simple",
				"simple_fields.php"
			],
			[
				"fields.php",
				"simple_fields.php"
			],
			[
				"class_simple_fields_field.php",
				"class_simple_fields_field.php"
			],
			[
				"readm",
				"readme.txt"
			],
			[
				"js",
				"scripts.js"
			],
			[
				"simple_fields.php",
				"simple_fields.php"
			],
			[
				"_f",
				"simple_fields.php"
			],
			[
				"simple-f",
				".idea/Simple-Fields-GIT.iml"
			],
			[
				"simp",
				"simple_fields.php"
			],
			[
				"readme",
				"readme.txt"
			],
			[
				"scrip",
				"scripts.js"
			],
			[
				"fun",
				"functions.php"
			],
			[
				"styl",
				"styles.css"
			],
			[
				".js",
				"trunk/scripts.js"
			],
			[
				"wpconfig",
				"playground/wordpress/wp-config.php"
			],
			[
				"re",
				"readme.txt"
			],
			[
				"st",
				"scripts.js"
			],
			[
				"in",
				"index.php"
			],
			[
				"options-permalink.php",
				"wordpress/wp-admin/options-permalink.php"
			],
			[
				"options-general.php",
				"wordpress/wp-admin/options-general.php"
			],
			[
				"scr",
				"scripts.js"
			],
			[
				"inde",
				"index.php"
			],
			[
				"script",
				"scripts.js"
			],
			[
				"tut8",
				"demofiler/tut8.py"
			],
			[
				"wp-config",
				"wp-config.php"
			],
			[
				"template-",
				"wp-content/themes/johanochnystrom/template-coworkers.php"
			],
			[
				"author",
				"wp-content/themes/johanochnystrom/author.php"
			],
			[
				"johanfunc",
				"wp-content/themes/johanochnystrom/functions.php"
			],
			[
				"johanfunctions.php",
				"wp-content/themes/johanochnystrom/functions.php"
			],
			[
				"prodfilt",
				"mockups/johanochnystrom/js/modules/product_filter.js"
			],
			[
				"contentfunct",
				"wp-content/themes/johanochnystrom/functions.php"
			],
			[
				"contentfun",
				"wp-content/themes/jnatwork/functions.php"
			],
			[
				"api.json",
				"mockups/johanochnystrom/api.json"
			],
			[
				"filter.",
				"mockups/jnatwork/filter.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/Documents/Localhost/EarthPeople/neverever-idiotbikten.sublime-project"
			],
			[
				"fiele",
				"/Users/bonny/Dropbox/Webb/simple-fields.sublime-project"
			],
			[
				"nigh",
				"/Users/bonny/Dropbox/Localhost/EarthPeople/viacom/wp-content/plugins/WordPress-Simple-Fields-master/playground nightly.sublime-project"
			],
			[
				"trib",
				"/Users/bonny/Dropbox/ep-trib.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"ep_",
				"ep_d"
			],
			[
				"",
				"APICPictureTypeLookup"
			]
		],
		"width": 763.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
